
// C·∫≠p nh·∫≠t b·∫£ng ƒëi·ªÅu khi·ªÉn v√† t·∫°o bi·ªÉu ƒë·ªì v·ªõi c√°c gi√° tr·ªã hi·ªán t·∫°i
document.addEventListener('DOMContentLoaded', async function() {
    const initialData = await fetchSensorData(); // L·∫•y d·ªØ li·ªáu t·ª´ MySQL ngay khi trang t·∫£i
    createChart(initialData); // T·∫°o bi·ªÉu ƒë·ªì v·ªõi d·ªØ li·ªáu ban ƒë·∫ßu

    // Th√™m s·ª± ki·ªán cho c√°c n√∫t b·∫≠t/t·∫Øt thi·∫øt b·ªã
    document.getElementById('toggle-light').addEventListener('click', () => {
        console.log('Light button clicked'); // Ki·ªÉm tra s·ª± ki·ªán click
        toggleDevice('light');
    });
    document.getElementById('toggle-fan').addEventListener('click', () => toggleDevice('fan'));
    document.getElementById('toggle-ac').addEventListener('click', () => toggleDevice('ac'));
});

// H√†m ƒë·ªÉ b·∫≠t/t·∫Øt tr·∫°ng th√°i thi·∫øt b·ªã v√† l∆∞u c√°c gi√° tr·ªã ƒë√£ c·∫≠p nh·∫≠t
async function toggleDevice(device) {
    const status = document.getElementById(`toggle-${device}`).textContent === 'Off';
    try {
        const response = await fetch(`http://localhost:3000/api/devices`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ device_name: device, status })  // G·ª≠i t√™n thi·∫øt b·ªã v√† tr·∫°ng th√°i
        });

        if (response.ok) {
            console.log(`Toggle request for ${device} successful`);
            fetchSensorData(); // C·∫≠p nh·∫≠t d·ªØ li·ªáu c·∫£m bi·∫øn sau khi b·∫≠t/t·∫Øt thi·∫øt b·ªã
            document.getElementById(`toggle-${device}`).textContent = status ? 'On' : 'Off';

            // C·∫≠p nh·∫≠t l·ªõp CSS cho t·ª´ng thi·∫øt b·ªã
            const lightIcon = document.getElementById('light-icon');
            const acIcon = document.getElementById('ac-icon');
            const fanIcon = document.getElementById('fan-icon');

            if (device === 'light') {
                if (status) {
                    lightIcon.classList.add('on'); // Th√™m l·ªõp 'on' cho ƒë√®n
                } else {
                    lightIcon.classList.remove('on'); // X√≥a l·ªõp 'on' cho ƒë√®n
                }
            } else if (device === 'ac') {
                if (status) {
                    acIcon.classList.add('moving'); // Th√™m l·ªõp 'moving' cho ƒëi·ªÅu h√≤a
                } else {
                    acIcon.classList.remove('moving'); // X√≥a l·ªõp 'moving' cho ƒëi·ªÅu h√≤a
                }
            } else if (device === 'fan') {
                if (status) {
                    fanIcon.classList.add('rotating'); // Th√™m l·ªõp 'rotating' cho qu·∫°t
                } else {
                    fanIcon.classList.remove('rotating'); // X√≥a l·ªõp 'rotating' cho qu·∫°t
                }
            }
        } else {
            console.error(`Failed to toggle ${device}, status: ${response.status}`);
        }
    } catch (error) {
        console.error(`L·ªói khi b·∫≠t/t·∫Øt thi·∫øt b·ªã ${device}:`, error);
    }
}





// H√†m ƒë·ªÉ c·∫≠p nh·∫≠t giao di·ªán b·∫£ng ƒëi·ªÅu khi·ªÉn
function updateDashboard(data) {
    updateTemperatureDisplay(data.temperature);
    document.getElementById('humidity-box').textContent = `üíß Humid ${data.humidity}%`;
    document.getElementById('light-box').textContent = `üí° Light ${data.light_level}`;
    updateDeviceStatus(data);
}

// H√†m ƒë·ªÉ c·∫≠p nh·∫≠t hi·ªÉn th·ªã nhi·ªát ƒë·ªô
function updateTemperatureDisplay(temperature) {
    const tempBox = document.getElementById('temp-box');
    let tempClass;

    if (temperature <= 15) {
        tempClass = 'temp-low';
    } else if (temperature <= 50) {
        tempClass = 'temp-medium';
    } else {
        tempClass = 'temp-high';
    }

    tempBox.textContent = `üå° Nhi·ªát ƒë·ªô ${temperature}¬∞C`;
    tempBox.className = tempClass;
}

// H√†m ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã
function updateDeviceStatus(data) {
    const fanIcon = document.getElementById('fan-icon');
    const acIcon = document.getElementById('ac-icon');
    const lightIcon = document.getElementById('light-icon');

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i qu·∫°t
    const fanStatusElement = document.getElementById('fan-status');
    if (data.fan === 'on') {
        fanIcon.classList.add('rotating');
        fanStatusElement.textContent = 'Qu·∫°t: B·∫≠t';
    } else {
        fanIcon.classList.remove('rotating');
        fanStatusElement.textContent = 'Qu·∫°t: T·∫Øt';
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒëi·ªÅu h√≤a
    const acStatusElement = document.getElementById('ac-status');
    if (data.ac === 'on') {
        acIcon.classList.add('blowing');
        acStatusElement.textContent = 'ƒêi·ªÅu H√≤a: B·∫≠t';
    } else {
        acIcon.classList.remove('blowing');
        acStatusElement.textContent = 'ƒêi·ªÅu H√≤a: T·∫Øt';
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√®n
    const lightStatusElement = document.getElementById('light-status');
    if (data.lightStatus === 'on') {
        lightIcon.src = 'https://img.icons8.com/plasticine/100/000000/light-on.png';
        lightStatusElement.textContent = 'ƒê√®n: B·∫≠t';
        lightStatusElement.classList.add('on');
        lightStatusElement.classList.remove('off');
    } else {
        lightIcon.src = 'https://img.icons8.com/plasticine/100/000000/light-off.png';
        lightStatusElement.textContent = 'ƒê√®n: T·∫Øt';
        lightStatusElement.classList.add('off');
        lightStatusElement.classList.remove('on');
    }
}

// H√†m ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì v·ªõi d·ªØ li·ªáu hi·ªán t·∫°i
let myChart; // L∆∞u tham chi·∫øu ƒë·∫øn bi·ªÉu ƒë·ªì

function createChart() {
    const ctx = document.getElementById('myChart').getContext('2d');

    myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [
                {
                    label: 'Temperature',
                    data: [],
                    borderColor: 'red',
                    fill: false
                },
                {
                    label: 'Humid',
                    data: [],
                    borderColor: 'blue',
                    fill: false
                },
                {
                    label: 'Light',
                    data: [],
                    borderColor: 'yellow',
                    fill: false
                }
            ]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
}

// H√†m ƒë·ªÉ c·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì v·ªõi d·ªØ li·ªáu m·ªõi
function updateChart(newData) {
    const timestamp = new Date().toLocaleTimeString();

    myChart.data.labels.push(timestamp);
    myChart.data.datasets[0].data.push(newData.temperature);
    myChart.data.datasets[1].data.push(newData.humidity);
    myChart.data.datasets[2].data.push(newData.light_level);

    myChart.update();
}

// H√†m ƒë·ªÉ l·∫•y d·ªØ li·ªáu c·∫£m bi·∫øn
async function fetchSensorData() {
    try {
        const response = await fetch('http://localhost:3000/api/sensors/latest');
        const data = await response.json();
        console.log('D·ªØ li·ªáu c·∫£m bi·∫øn nh·∫≠n ƒë∆∞·ª£c:', data);
        updateDashboard(data);   // C·∫≠p nh·∫≠t d·ªØ li·ªáu tr√™n giao di·ªán
        updateChart(data);       // C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì v·ªõi d·ªØ li·ªáu m·ªõi
        return data; // Tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë·ªÉ s·ª≠ d·ª•ng trong t·∫°o bi·ªÉu ƒë·ªì
    } catch (error) {
        console.error('L·ªói khi l·∫•y d·ªØ li·ªáu c·∫£m bi·∫øn:', error);
    }
}

// G·ªçi h√†m fetchSensorData m·ªói 10 gi√¢y
setInterval(fetchSensorData, 10000);


